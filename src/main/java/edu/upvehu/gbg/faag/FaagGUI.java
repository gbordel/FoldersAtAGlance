/*
 * The MIT License
 *
 * Copyright 2017 Germ√°n Bordel.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package edu.upvehu.gbg.faag;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.PrintWriter;
import java.io.StringWriter;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;

/**
 *
 * @author German Bordel
 */
public class FaagGUI extends javax.swing.JFrame {

    static FaagGUI theInstance=null;
    static boolean controlDown;

    /**
     * Creates new form MainFrame
     */
    private FaagGUI() throws Exception{
        initComponents();
        setLocationByPlatform(true);
        addWindowListener(new WindowAdapter() {
                    @Override
                    public void windowClosing(WindowEvent we) {

                        Config config=new Config();
                        Config.loadFromXML(config);
                        boolean cambios=!foldersJPanel1.getFolders().equals(config.folders);
                        String msg=cambios?"<html>Seems you made changes... close de app. without saving?":"<html>Close the app.?";
                        if (controlDown && !cambios) {
                            System.exit(0);
                        }
                        String ObjButtons[] = {"Yes", "No"};
                        int PromptResult = JOptionPane.showOptionDialog(theInstance, msg, "MyFolders", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, ObjButtons, ObjButtons[1]);
                        if (PromptResult == JOptionPane.YES_OPTION) {
                            System.exit(0);
                        }
                    }
                });
        foldersJPanel1.setComponentPopupMenu(mainJPopupMenu);
        setVisible(true);
        loadActionPerformed(null);

        if (jEditorPane1.getText().indexOf("ERROR")!=-1)
            popErrorDialog("Error loading info.","<html><body style=\"color:red;margin:20px\">Error loading info.<br/><p>Sorry. Just use the context menu options. &lt;CTL> key is also effective in some cases</p></body></html>" );
    }

    public static FaagGUI newInstance() throws Exception{
        if (theInstance==null) theInstance=new FaagGUI();
        return theInstance;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainJPopupMenu = new javax.swing.JPopupMenu();
        expandJMenuItem = new javax.swing.JMenuItem();
        renameJMenuItem = new javax.swing.JMenuItem();
        parentJMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        bgColorJMenuItem = new javax.swing.JMenuItem();
        fgColorJMenuItem = new javax.swing.JMenuItem();
        expandStyleJjMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        hideJMenuItem = new javax.swing.JMenuItem();
        hideTreeJMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        loadJMenuItem = new javax.swing.JMenuItem();
        saveJMenuItem = new javax.swing.JMenuItem();
        jDialog1 = new javax.swing.JDialog();
        jColorChooser1 = new javax.swing.JColorChooser();
        errorJDialog = new javax.swing.JDialog();
        errorJLabel = new javax.swing.JLabel();
        jDialog2 = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jPanel1 = new javax.swing.JPanel();
        rootDirButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        highlightJTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        foldersJPanel1 = new edu.upvehu.gbg.faag.FoldersJPanel();

        expandJMenuItem.setText("Display subfolders");
        expandJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expandJMenuItemActionPerformed(evt);
            }
        });
        mainJPopupMenu.add(expandJMenuItem);

        renameJMenuItem.setText("Rename");
        renameJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameJMenuItemActionPerformed(evt);
            }
        });
        mainJPopupMenu.add(renameJMenuItem);

        parentJMenuItem.setText("Display parent folder");
        parentJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parentJMenuItemActionPerformed(evt);
            }
        });
        mainJPopupMenu.add(parentJMenuItem);
        mainJPopupMenu.add(jSeparator1);

        bgColorJMenuItem.setText("Background color");
        bgColorJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bgColorJMenuItemActionPerformed(evt);
            }
        });
        mainJPopupMenu.add(bgColorJMenuItem);

        fgColorJMenuItem.setText("Foregroun color");
        fgColorJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fgColorJMenuItemActionPerformed(evt);
            }
        });
        mainJPopupMenu.add(fgColorJMenuItem);

        expandStyleJjMenuItem.setText("Expand style");
        expandStyleJjMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expandStyleJjMenuItemActionPerformed(evt);
            }
        });
        mainJPopupMenu.add(expandStyleJjMenuItem);
        mainJPopupMenu.add(jSeparator3);

        hideJMenuItem.setText("Hide folder");
        hideJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideJMenuItemActionPerformed(evt);
            }
        });
        mainJPopupMenu.add(hideJMenuItem);

        hideTreeJMenuItem.setText("Hide from here");
        hideTreeJMenuItem.setActionCommand("Hide all subfolders");
        hideTreeJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideTreeJMenuItemActionPerformed(evt);
            }
        });
        mainJPopupMenu.add(hideTreeJMenuItem);
        mainJPopupMenu.add(jSeparator2);

        loadJMenuItem.setText("Load");
        loadJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });
        mainJPopupMenu.add(loadJMenuItem);

        saveJMenuItem.setText("Save");
        saveJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        mainJPopupMenu.add(saveJMenuItem);

        jDialog1.setModal(true);
        jDialog1.getContentPane().add(jColorChooser1, java.awt.BorderLayout.CENTER);

        errorJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        errorJLabel.setText("jLabel1");
        errorJDialog.getContentPane().add(errorJLabel, java.awt.BorderLayout.CENTER);

        jEditorPane1.setEditable(false);
        jEditorPane1.setContentType("text/html"); // NOI18N
        jEditorPane1.setText(Info.getInfo());
        jScrollPane2.setViewportView(jEditorPane1);

        jDialog2.getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Folders at a glance ((c)2017)");
        setPreferredSize(new java.awt.Dimension(1000, 600));

        jPanel1.setBackground(new java.awt.Color(188, 188, 188));
        jPanel1.setLayout(new java.awt.BorderLayout());

        rootDirButton.setBackground(new java.awt.Color(188, 188, 188));
        rootDirButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rootDirButton.setText("   ./ ");
        rootDirButton.setToolTipText("Choose folders from root.");
        rootDirButton.setBorder(null);
        rootDirButton.setBorderPainted(false);
        rootDirButton.setContentAreaFilled(false);
        rootDirButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        rootDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rootDirButtonActionPerformed(evt);
            }
        });
        jPanel1.add(rootDirButton, java.awt.BorderLayout.LINE_START);

        jPanel2.setBackground(new java.awt.Color(188, 188, 188));

        highlightJTextField.setColumns(20);
        highlightJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                highlightJTextFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                highlightJTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                highlightJTextFieldKeyTyped(evt);
            }
        });
        jPanel2.add(highlightJTextField);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/information.png"))); // NOI18N
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setIconTextGap(0);
        jButton1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        jPanel1.add(jPanel2, java.awt.BorderLayout.LINE_END);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);
        getContentPane().add(foldersJPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        Config.saveToXML(new Config(getWidth(),getHeight(),foldersJPanel1.getFolders()));
    }//GEN-LAST:event_saveActionPerformed

    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
        Config config=new Config();
        Config.loadFromXML(config);
        setPreferredSize(new Dimension(config.width,config.height));
        foldersJPanel1.setFolders(config.folders);
        foldersJPanel1.repaint();
        pack();
    }//GEN-LAST:event_loadActionPerformed

    private void hideJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideJMenuItemActionPerformed
        foldersJPanel1.hideFolder();
    }//GEN-LAST:event_hideJMenuItemActionPerformed

    private void expandJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expandJMenuItemActionPerformed
        chooseFolders(foldersJPanel1.getFocusedFolder().folder);
    }//GEN-LAST:event_expandJMenuItemActionPerformed

    private void hideTreeJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideTreeJMenuItemActionPerformed
       foldersJPanel1.hideFolderTree();
    }//GEN-LAST:event_hideTreeJMenuItemActionPerformed

    private void highlightJTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_highlightJTextFieldKeyTyped
        String v=highlightJTextField.getText();
        foldersJPanel1.highlightFolders(evt.getKeyChar()=='\u0008' ? v : (v+evt.getKeyChar()));
        controlDown=evt.isControlDown();
    }//GEN-LAST:event_highlightJTextFieldKeyTyped

    private void highlightJTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_highlightJTextFieldKeyPressed
       controlDown=evt.isControlDown();
    }//GEN-LAST:event_highlightJTextFieldKeyPressed

    private void highlightJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_highlightJTextFieldKeyReleased
       controlDown=false;
    }//GEN-LAST:event_highlightJTextFieldKeyReleased

    private void bgColorJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bgColorJMenuItemActionPerformed
        Color newColor = JColorChooser.showDialog(
                     this,
                     "Choose Background Color",
                     foldersJPanel1.getFocusedtFolderBgColor());
        if (newColor!=null) foldersJPanel1.setFolderBgColor(newColor);
    }//GEN-LAST:event_bgColorJMenuItemActionPerformed

    private void expandStyleJjMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expandStyleJjMenuItemActionPerformed
        foldersJPanel1.expandFolderStyle();
    }//GEN-LAST:event_expandStyleJjMenuItemActionPerformed

    private void fgColorJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fgColorJMenuItemActionPerformed
        Color newColor = JColorChooser.showDialog(
                     this,
                     "Choose Color",
                     foldersJPanel1.getFocusedtFolderFgColor());
        if (newColor!=null) foldersJPanel1.setFolderTextColor(newColor);
    }//GEN-LAST:event_fgColorJMenuItemActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jDialog2.pack();
        jDialog2.setLocationRelativeTo(this);
        jDialog2.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void parentJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parentJMenuItemActionPerformed
        foldersJPanel1.addParentFolder();
    }//GEN-LAST:event_parentJMenuItemActionPerformed

    private void renameJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameJMenuItemActionPerformed
        String s = (String)JOptionPane.showInputDialog(
                    this,
                    "New name:",
                    "Renaming the folder",
                    JOptionPane.PLAIN_MESSAGE);
        if (s!=null && s.length()>0) foldersJPanel1.renameFolder(s);
    }//GEN-LAST:event_renameJMenuItemActionPerformed

    private void rootDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rootDirButtonActionPerformed
        chooseFolders(null);
    }//GEN-LAST:event_rootDirButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem bgColorJMenuItem;
    private javax.swing.JDialog errorJDialog;
    private javax.swing.JLabel errorJLabel;
    private javax.swing.JMenuItem expandJMenuItem;
    private javax.swing.JMenuItem expandStyleJjMenuItem;
    private javax.swing.JMenuItem fgColorJMenuItem;
    private edu.upvehu.gbg.faag.FoldersJPanel foldersJPanel1;
    private javax.swing.JMenuItem hideJMenuItem;
    private javax.swing.JMenuItem hideTreeJMenuItem;
    private javax.swing.JTextField highlightJTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JMenuItem loadJMenuItem;
    private javax.swing.JPopupMenu mainJPopupMenu;
    private javax.swing.JMenuItem parentJMenuItem;
    private javax.swing.JMenuItem renameJMenuItem;
    private javax.swing.JButton rootDirButton;
    private javax.swing.JMenuItem saveJMenuItem;
    // End of variables declaration//GEN-END:variables

    JPopupMenu getPopupMenu() {
        return mainJPopupMenu;
    }

    void popErrorDialog(Throwable t){
         errorJDialog.setTitle(t.getMessage());
            StringWriter s=new StringWriter();
            t.printStackTrace(new PrintWriter(s));
            errorJLabel.setText(s.toString());
            errorJDialog.pack();
            errorJDialog.setLocationRelativeTo(this);
            errorJDialog.setVisible(true);
    }
    void popErrorDialog(String title, String msg){
         errorJDialog.setTitle(title);
            errorJLabel.setText(msg);
            errorJDialog.pack();
            errorJDialog.setLocationRelativeTo(this);
            errorJDialog.setVisible(true);
    }

    void popupMenuFolder() {customizePopupMenu(true);}
    void popupMenuBackgroud() {customizePopupMenu(false);}
    void customizePopupMenu(boolean b) {
        parentJMenuItem.setVisible(b);
        renameJMenuItem.setVisible(b);
        expandJMenuItem.setVisible(b);
        hideJMenuItem.setVisible(b);
        hideTreeJMenuItem.setVisible(b);
        bgColorJMenuItem.setVisible(b);
        fgColorJMenuItem.setVisible(b);
        expandStyleJjMenuItem.setVisible(b);
        jSeparator1.setVisible(b);
        jSeparator2.setVisible(b);
        jSeparator3.setVisible(b);
    }

    private void chooseFolders(String baseDir){
        JFileChooser chooser;
        if (baseDir!=null) chooser = new JFileChooser(baseDir);
        else {
            chooser= new JFileChooser("c:/");
            chooser.changeToParentDirectory();
        }
        chooser.setDialogTitle("Select one or more folders to show");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setMultiSelectionEnabled(true);
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION)
                foldersJPanel1.expandFolder(chooser.getSelectedFiles());
    }
}
